name: Package opam releases

on:
  workflow_dispatch:
    # BEWARE: The `workflow_dispatch/inputs/*/default` attribute does not behave like `workflow_call/inputs/*/default`.
    # Specifically the defaults are not populated in github.event.inputs. It only
    # influences the web UI.
    # Either way, we use the idiom ${{ github.event.inputs.NAME || 'the default' }}
    # to read a default **in addition** to the web UI default specified here.
    inputs:
      test-filter:
        type: choice
        description: "Which tests are used"
        required: false
        default: all-tests
        options:
          - "all-tests"
          - "no-tests"
          - "no-direct-tests"
          - "no-vagrant-tests"
      dkml-compiler:
        type: string
        description: "Git branch, tag or commit for dkml-base-compiler"
        required: false
        default: "" # "@repository@" = Opam ; "" = latest from default branch of git clone
      dkml-component-opam:
        type: string
        description: "Git branch, tag or commit for dkml-component-*-opam"
        required: false
        default: "" # "@repository@" = Opam ; "" = latest from default branch of git clone
  push:
    branches:
      - "main"
    tags:
      - v*
      - "[0-9]+.*"

env:
  OPAM_PACKAGE: dkml-installer-offline-opam
  PROGRAM_NAME_KEBAB: opam
  #=== ERROR while compiling alcotest.1.5.0 =====================================#
  # context              2.0.10 | win32/x86_64 |  | https://opam.ocaml.org#173f1aaf
  # ...
  #           cl src/alcotest/alcotest_stubs.obj (exit 2)
  # (cd _build/default/src/alcotest && "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.25.28610\bin\HostX64\x64\cl.exe" -nologo -O2 -Gy- -MD -D_CRT_SECURE_NO_DEPRECATE -nologo -O2 -Gy- -MD -I D:/.opam/dkml/lib/ocaml -I D:\.opam\dkml\lib\astring -I D:\.opam\dkml\lib\fmt -I ../alcotest-engine /Foalcotest_stubs.obj -c alcotest_stubs.c)
  # alcotest_stubs.c
  # alcotest_stubs.c(4): fatal error C1083: Cannot open include file: 'unistd.h': No such file or directory
  PIN_ALCOTEST: 1.4.0

jobs:
  setup-dkml:
    # Use `dkml-workflows` or `dkml-workflows-prerelease`
    #uses: "diskuv/dkml-workflows/.github/workflows/setup-dkml.yml@v0"
    uses: "diskuv/dkml-workflows-prerelease/.github/workflows/setup-dkml.yml@v0"

    with:
      ocaml-compiler: 4.12.1
      dkml-compiler: ${{ github.event.inputs.dkml-compiler }}

  release-notes:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Semver versions
        run: |
          # From refs/tags/v0.4.0-prerel91_r1_no_test -> 0.4.0
          # From refs/tags/v0.4.0+something -> 0.4.0
          MAJMINPAT=$(printf "%s" '${{ github.ref }}' | sed 's#refs/tags/##; s#^v##; s#-.*##; s#+.*##')
          # From refs/tags/v0.4.0-prerel91_r1_no_test -> 0.4.0-prerel91
          # From refs/tags/v0.4.0+something -> 0.4.0
          MAJMINPATPRE=$(printf "%s" '${{ github.ref }}' | sed 's#refs/tags/##; s#^v##; s#\(-prerel[0-9]*\).*#\1#; s#+.*##')
          echo "MAJMINPAT=$MAJMINPAT" >> $GITHUB_ENV
          echo "MAJMINPATPRE=$MAJMINPATPRE" >> $GITHUB_ENV

          printf 'Major.Minor.Patch = \e[1;34m%s\e[0m\n' "$MAJMINPAT"
          printf 'Major.Minor.Patch[-Prerelease] = \e[1;34m%s\e[0m\n' "$MAJMINPATPRE"
      - name: View release notes
        run: |
          notes=contributors/changes/v${MAJMINPAT}.md
          cat > footer.md <<EOF
          ## Asset Listing
          | Syntax                                        | Supported? | Description                                                                         |
          | --------------------------------------------- | ---------- | ----------------------------------------------------------------------------------- |
          | setup-opam-windows_x86_64-$MAJMINPAT.exe      | Yes        | 64-bit opam installer. **You should download+install this**                         |
          | setup-opam-windows_x86-$MAJMINPAT.exe         | Partial    | 32-bit opam on 64-bit Windows.                                                      |
          | uninstall-opam-windows_x86_64-$MAJMINPAT.exe  | Yes        | 64-bit opam uninstaller. Use this if support@ tells you                             |
          | uninstall-opam-windows_x86-$MAJMINPAT.exe     | Partial    | 32-bit opam uninstaller                                                             |
          | unsigned-opam-windows_x86_64-i-$MAJMINPAT.exe | Yes        | Unsigned installer. Use when you want to verify you can reproduce the installer ... |
          | unsigned-opam-windows_x86-i-$MAJMINPAT.exe    | Partial    | ... directly from source code. Reproducibility is not yet 100%                      |
          | opam-darwin_x86_64-i-$MAJMINPAT.tar.gz        | No         | Unsigned macOS on Intel binary distribution                                         |
          | opam-linux_x86_64-i-$MAJMINPAT.tar.gz         | No         | Linux distribution compatible with CentOS 7, CentOS 8, Fedora 32+, Mageia 8+, ...   |
          | opam-linux_x86-i-$MAJMINPAT.tar.gz            | No         | ... openSUSE 15.3+, Photon OS 4.0+ (3.0+ with updates), Ubuntu 20.04+Linux          |
          | opam-windows_x86-i-$MAJMINPAT.sfx             | No         | Self-extracting executable header used when creating signed installers from ...     |
          | opam-windows_x86_64-i-$MAJMINPAT.sfx          | No         | ... the pk7zip contents of the unsigned Windows installers                          |
          | *-u-$MAJMINPAT.*                              | No         | Uninstallers for all the above                                                      |
          EOF
          echo > emptyline
          if [ -e "$notes" ]; then
            RELEASEDATE=$(date -u +%Y-%m-%d)
            cat "$notes" emptyline footer.md | sed "s/@@YYYYMMDD@@/$RELEASEDATE/" > notes.md
          else
            cp footer.md notes.md
          fi
          cat notes.md # Just for troubleshooting
      - uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: notes.md

  build:
    timeout-minutes: 90 # 1.5 hours

    # Wait until `setup-dkml` is finished
    needs: setup-dkml

    # Five (5) build environments will be available. You can include
    # all of them or a subset of them.
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            abi-pattern: win32-windows_x86
            dkml-host-abi: windows_x86
            opam-root: D:/.opam
            default_shell: msys2 {0}
            msys2_system: MINGW32
            msys2_packages: mingw-w64-i686-pkg-config
          - os: windows-2019
            abi-pattern: win32-windows_x86_64
            dkml-host-abi: windows_x86_64
            opam-root: D:/.opam
            default_shell: msys2 {0}
            msys2_system: CLANG64
            msys2_packages: mingw-w64-clang-x86_64-pkg-config
          - os: macos-latest
            abi-pattern: macos-darwin_all
            dkml-host-abi: darwin_x86_64
            opam-root: /Users/runner/.opam
            default_shell: sh
          - os: ubuntu-latest
            abi-pattern: manylinux2014-linux_x86
            dkml-host-abi: linux_x86
            opam-root: .ci/opamroot
            default_shell: sh
          - os: ubuntu-latest
            abi-pattern: manylinux2014-linux_x86_64
            dkml-host-abi: linux_x86_64
            opam-root: .ci/opamroot
            default_shell: sh

    runs-on: ${{ matrix.os }}
    name: build / ${{ matrix.abi-pattern }}

    # Use a Unix shell by default, even on Windows
    defaults:
      run:
        shell: ${{ matrix.default_shell }}

    env:
      # When non-empty, instead of building the standard components from the
      # central Opam repository, use the github/gitlab development repositories
      # directly.
      DKML_COMPONENT_OFFLINE_OPAM: "${{ github.event.inputs.dkml-component-opam }}"
      DKML_COMPONENT_XX_CONSOLE: ""

      # Remove warnings
      HOMEBREW_NO_INSTALL_CLEANUP: 1

    steps:
      # BOILERPLATE START: setup-dkml
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install MSYS2 to provide Unix shell (Windows only)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2_system }}
          update: true
          install: >-
            ${{ matrix.msys2_packages }}
            wget
            make
            rsync
            diffutils
            patch
            unzip
            git
            tar

      - name: Download setup-dkml artifacts
        uses: actions/download-artifact@v3
        with:
          path: .ci/dist

      - name: Import build environments from setup-dkml
        run: |
          ${{ needs.setup-dkml.outputs.import_func }}
          import ${{ matrix.abi-pattern }}

      - name: Cache Opam downloads by host
        uses: actions/cache@v3
        with:
          path: ${{ matrix.opam-root }}/download-cache
          key: ${{ matrix.dkml-host-abi }}
      # BOILERPLATE END: setup-dkml

      # The action/checkout steps used for pinning will re-use existing Git objects
      # because of caching
      - name: Cache Git checkouts of Opam pins by OS
        uses: actions/cache@v3
        with:
          path: .ci/g
          key: ${{ runner.os }}-gitpin

      # version pins
      - name: Pins for packages to work on all OSes including Windows
        run: |
          opamrun pin add --yes --no-action -k version alcotest ${{ env.PIN_ALCOTEST }}

      # BOILERPLATE START: setup-dkml
      - name: Package up the installer
        # Because of the error on manylinux2014 (CentOS 7):
        #   No solution found, exiting
        #   - conf-pkg-config
        #   depends on the unavailable system package 'pkgconfig'.
        # we use `--no-depexts`. The dockcross manylinux2014 has package names
        # pkgconfig.i686 and pkgconfig.x86_64, it does not seem to match what
        # opam 2.1.0 is looking for ("pkgconfig").
        # `conf-pkg-config` is needed by `dkml-component-staging-unixutils` ->
        # `digestif`
        run: |
          #!/bin/sh
          set -euf

          opamrun update

          case "${{ matrix.dkml-host-abi }}" in
            linux_*) opamrun install ./${OPAM_PACKAGE}.opam --with-test --yes --no-depexts ;;
            *) opamrun install ./${OPAM_PACKAGE}.opam --with-test --yes ;;
          esac

          # Examine the installer
          _share=$(opamrun var ${OPAM_PACKAGE}:share)
          opamrun install diskuvbox --yes
          opamrun exec -- diskuvbox tree -d 6 --encoding UTF-8 "$_share"

          # Finalize and distribute the Console installer (each type of installer has its unique finalization procedure)
          install -d dist
          case "${{ matrix.dkml-host-abi }}" in
            linux_*)
              opamrun exec -- "$_share"/t/bundle-${PROGRAM_NAME_KEBAB}-"${{ matrix.dkml-host-abi }}"-i.sh -o dist -e .tar.gz tar --gzip
              opamrun exec -- "$_share"/t/bundle-${PROGRAM_NAME_KEBAB}-"${{ matrix.dkml-host-abi }}"-u.sh -o dist -e .tar.gz tar --gzip
              ;;
            darwin*)
              opamrun exec -- "$_share"/t/bundle-${PROGRAM_NAME_KEBAB}-"${{ matrix.dkml-host-abi }}"-i.sh -o dist -e .tar.gz -t bsd tar --gzip
              opamrun exec -- "$_share"/t/bundle-${PROGRAM_NAME_KEBAB}-"${{ matrix.dkml-host-abi }}"-i.sh -o dist -e .tar.gz -t bsd tar --gzip
              ;;
            windows_*)
              opamrun exec -- find "$_share"/t -maxdepth 1 -name "unsigned-${PROGRAM_NAME_KEBAB}-${{ matrix.dkml-host-abi }}-i-*.exe" -exec install {} dist/ \;
              opamrun exec -- find "$_share"/t -maxdepth 1 -name "unsigned-${PROGRAM_NAME_KEBAB}-${{ matrix.dkml-host-abi }}-u-*.exe" -exec install {} dist/ \;
              opamrun exec -- find "$_share"/t -maxdepth 1 -name "${PROGRAM_NAME_KEBAB}-${{ matrix.dkml-host-abi }}-i-*.sfx" -exec install {} dist/ \;
              opamrun exec -- find "$_share"/t -maxdepth 1 -name "${PROGRAM_NAME_KEBAB}-${{ matrix.dkml-host-abi }}-u-*.sfx" -exec install {} dist/ \;
              ;;
          esac

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dkml-host-abi }}
          path: dist/
      # BOILERPLATE END: setup-dkml

  #--------
  # Testing
  #--------

  # Direct testing is simply using GitHub virtual machine to run the setup.
  #
  # Pros and Cons
  #   Because GitHub virtual machine already has Visual Studio and several other
  #   tools, it doesn't exercise all the paths that vagrant-testing covers.
  #   However, it is quicker and it can find issues with conflicting Cygwin
  #   (or any other of the many programs that are installed on a GitHub machine).
  #   In addition, windows-2019 (somewhat older Windows) and windows-latest (2022, or
  #   which is the latest) is tested ... Vagrant is closer to windows-latest
  #   as of Apr 2022.
  #
  # Matrix
  #   Instead of all 4 combinations of (2019,latest) x (32bit,64bit), we half
  #   the matrix so save compute cycles.
  #
  # Tricky Issues
  #   [Git installer hangs]
  #
  #   The move for both windows-2019 and windows-latest from
  #     Image Release: https://github.com/actions/virtual-environments/releases/tag/win19%2F20220606.1
  #   to:
  #     Image Release: https://github.com/actions/virtual-environments/releases/tag/win19%2F20220614.0
  #   causes the Git for Windows 2.36.0 installer to hang.
  #
  #   Root cause? It is likely antivirus
  #   (https://github.com/git-for-windows/msys2-runtime/pull/37) or a slightly
  #   different UAC environment.
  #
  #   Mitigation: Pre-install Git for Windows from Chocolatey. Also Vagrant still
  #   tests the Git installer successfully.
  direct-testing:
    # Disabled until "Tricky Issues" is fixed
    if: false
    # if: |
    #   github.event.inputs.test-filter != 'no-tests' &&
    #   github.event.inputs.test-filter != 'no-direct-tests' &&
    #   !endsWith(github.ref_name, '_no_test')
    timeout-minutes: 90 # 1.5 hours
    # Wait for build
    needs:
      - build

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            dkml-host-abi: windows_x86
          - os: windows-latest
            dkml-host-abi: windows_x86_64

    runs-on: ${{ matrix.os }}
    name: direct / ${{ matrix.os }} ${{ matrix.dkml-host-abi }}

    steps:
      - name: Download and unpack ${{ matrix.dkml-host-abi }} artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.dkml-host-abi }}
          path: dist

      - name: Test the installer (Windows)
        env:
          # Fix PATH so that C:\Program Files\Git\usr\bin\cygpath.exe is gone
          PATH: "C:\\Program Files\\PowerShell\\7;\
            C:\\ProgramData\\chocolatey\\bin;\
            C:\\Program Files (x86)\\NSIS\\;\
            C:\\tools\\zstd;\
            C:\\Program Files\\dotnet;\
            C:\\Windows\\system32;\
            C:\\Windows;\
            C:\\Windows\\System32\\Wbem;\
            C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\
            C:\\Program Files\\Docker;\
            C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit"
        # If we don't change the shell then msys2/setup-msys2@v2 will conflict with
        # the dkml-component-unixutils' MSYS2 ... you get:
        #    *** fatal error - cygheap base mismatch detected - 0x180348408/0x180349408.
        #   This problem is probably due to using incompatible versions of the cygwin DLL.
        shell: pwsh
        run: |
          $setups = Get-ChildItem -Path dist -Filter "unsigned-*-i-*.exe"
          foreach ($setup in $setups)
          {
            Write-Host "Running $($setup.FullName) ..."
            & $setup.FullName -v -v --color=always
            if ($LastExitCode -ne 0) { throw "setup failed! Exited with $LastExitCode" }

            & "$env:LOCALAPPDATA\Programs\opam\bin\opam.exe" --version
            if ($LastExitCode -ne 0) { throw "opam.exe --version failed! Exited with $LastExitCode" }

            & "$env:LOCALAPPDATA\Programs\opam\bin\opam.exe" var
            if ($LastExitCode -ne 0) { throw "opam.exe var failed! Exited with $LastExitCode" }
          }

          $uninstalls = Get-ChildItem -Path dist -Filter "unsigned-*-u-*.exe"
          foreach ($uninstall in $uninstalls)
          {
            Write-Host "Running $($uninstall.FullName) ..."
            & $uninstall.FullName -v -v --color=always
            if ($LastExitCode -ne 0) { throw "uninstall failed! Exited with $LastExitCode" }
          }

  #--------
  # Release
  #--------
  #
  # We need Release to run even if the tests are disabled with _no_test tag
  # or through a test-filter. That means we cannot put a dependency on
  # the tests.
  # With no dependency on tests, we can create a Release even if tests fail.
  # But that is OK because the Release is just a Pre-release.

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for softprops/action-gh-release@v1
    # Wait until `build` and `release-notes` complete
    needs:
      - build
      - release-notes
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Remove setup artifacts
        run: rm -rf setup-*
        working-directory: dist

      - name: Restructure multi-ABI directories
        run: |
          _release="$(pwd)/_release"
          install -d "$_release"

          # Special case: Release notes are not part of multi-ABI
          mv dist/release-notes release-notes

          cd dist
          find . -mindepth 1 -maxdepth 1 -type d | while read -r distname; do
            rsync -av $distname/ "$_release"
          done

      - name: Display files to be distributed
        run: ls -R
        working-directory: _release

      - name: Release (only when Git tag pushed)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          prerelease: true # becomes a real release after it is signed externally
          body_path: release-notes/notes.md
          files: |
            _release/*

      - name: Remove unneeded artifacts from GitHub Storage
        uses: geekyeggo/delete-artifact@v1
        with:
          failOnError: false
          name: |
            setup-dkml-macos-darwin_all
            setup-dkml-manylinux2014-linux_x86
            setup-dkml-manylinux2014-linux_x86_64
            setup-dkml-win32-windows_x86
            setup-dkml-win32-windows_x86_64
